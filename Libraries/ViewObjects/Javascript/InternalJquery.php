<?php namespace ZN\ViewObjects;

use JQ, CallController;

class InternalJquery extends CallController implements InternalJqueryInterface
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Jquery Trait
    //--------------------------------------------------------------------------------------------------------
    //
    // @methods
    //
    //--------------------------------------------------------------------------------------------------------
    use JqueryTrait;

    //--------------------------------------------------------------------------------------------------------
    // Property Queue
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string
    //
    //--------------------------------------------------------------------------------------------------------
    protected $propertyQueue = '';

    //--------------------------------------------------------------------------------------------------------
    // Property
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string   $property
    // @param variadic $attr
    //
    //--------------------------------------------------------------------------------------------------------
    public function property(String $property, ...$attr) : InternalJquery
    {
        $this->propertyQueue .= JQ::property($property, $attr);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Complete
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function complete() : String
    {
        $complete = $this->propertyQueue;

        $this->_defaultVariable();

        return $complete;
    }

    //--------------------------------------------------------------------------------------------------------
    // Create
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function create(...$args) : String
    {
        $combineFunction = $args;

        $complete  = EOL.JQ::selector($this->selector);

        $complete .= $this->complete();

        if( ! empty($combineFunction)) foreach( $combineFunction as $function )
        {
            $complete .= $function;
        }

        $complete .= ";";

        return $complete;
    }

    //--------------------------------------------------------------------------------------------------------
    // Ajax
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function ajax(Bool $tag = false, Bool $jq = false, Bool $jqui = false) : Jquery\Helpers\Ajax
    {
        return uselib($this->_namespace('Ajax'), [$tag, $jq, $jqui]);
    }

    //--------------------------------------------------------------------------------------------------------
    // Action
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function action(Bool $tag = false, Bool $jq = false, Bool $jqui = false) : Jquery\Helpers\Action
    {
        return uselib($this->_namespace('Action'), [$tag, $jq, $jqui]);
    }

    //--------------------------------------------------------------------------------------------------------
    // Animate
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function animate(Bool $tag = false, Bool $jq = false, Bool $jqui = false) : Jquery\Helpers\Animate
    {
        return uselib($this->_namespace('Animate'), [$tag, $jq, $jqui]);
    }

    //--------------------------------------------------------------------------------------------------------
    // Event
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function event(Bool $tag = false, Bool $jq = false, Bool $jqui = false) : Jquery\Helpers\Event
    {
        return uselib($this->_namespace('Event'), [$tag, $jq, $jqui]);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Namespace
    //--------------------------------------------------------------------------------------------------------
    //
    // @param  string class
    // @return string
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _namespace($class)
    {
        return 'ZN\ViewObjects\Bootstrap\Jquery\Helpers\\'.$class;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Variable
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariable()
    {
        $this->selector = 'this';
        $this->propertyQueue = '';
    }
}
