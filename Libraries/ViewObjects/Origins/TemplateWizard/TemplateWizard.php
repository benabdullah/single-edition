<?php namespace ZN\ViewObjects;

use Errors, Exceptions, CallController, Config;
use ZN\FileSystem\File;
use ZN\IndividualStructures\Buffer;

class TemplateWizard extends CallController
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

	//--------------------------------------------------------------------------------------------------------
    // Isolation -> 5.3.15
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $string
    //
    //--------------------------------------------------------------------------------------------------------
	public static function isolation(String $data = '')
	{
		File\Forge::replace($data, ['<?php', '<?', '?>'], ['{[', '{[', ']}']);
	}

    //--------------------------------------------------------------------------------------------------------
    // Data -> 5.3.15[edited]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $string
    // @param array  $data
    //
    //--------------------------------------------------------------------------------------------------------
    public static function data(String $string, Array $data = []) : String
    {
        $pattern = array_merge
        (
            self::_symbolsHeader(),
            self::_keywords(),
            self::_printable(),
            self::_functions(),
            self::_symbolsFooter(),
            self::_comments(),
            self::_required(),
            self::_tags(),
            self::_jsdata(),
            self::_html()
        );

        return Buffer\Callback::code(self::replace($pattern, $string), $data);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Replace
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function replace($pattern, $string)
    {
        return preg_replace(array_keys($pattern), array_values($pattern), $string);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Config
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function config()
    {
        return Config::get('ViewObjects', 'wizard');
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Required
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _required()
    {
        return
        [
            '/\{\{\{\s*(.*?)\s*\}\}\}/s' => '<?php echo htmlentities($1) ?>',
            '/\{\{(\s*.*?)\s*\}\}/s'     => '<?php echo $1 ?>',
        ];
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Keywords -> 5.4.4[edited]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _keywords()
    {
        $array = [];

        if( self::config()['keywords'] ?? true )
        {
            $array =
            [
                '/@endforelse:/'                                         => '<?php endif; ?>',                                       
                '/@forelse\s*\((\s*(.*?)\s+as\s+(.*?))\)\:/s'            => '<?php if( ! empty($2) ): foreach($1): ?>',
                '/@empty\:/'                                             => '<?php endforeach; else: ?>',           
                '/@(endif|endforeach|endfor|endwhile|break|continue)\:/' => '<?php $1 ?>',
                '/@(elseif|if|else|foreach|for|while)\s*(.*?)\:/s'       => '<?php $1$2: ?>'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Printable
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _printable()
    {
        $array = [];

        if( self::config()['printable'] ?? true )
        {
            $array =
            [
                '/@\$(.*?)\:/s' => '<?php echo $$1 ?>',
                '/@@(.*?)\:/s'  => '<?php echo $1 ?>',
                '/@(.*?\))\:/s' => '<?php $1 ?>'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Functions
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _functions()
    {
        $array = [];

        if( self::config()['functions'] ?? true )
        {
            $array =
            [
                '/@(.*?\))\:/s' => '<?php $1 ?>'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Comments
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _comments()
    {
        $array = [];

        if( self::config()['comments'] ?? true )
        {
            $array =
            [

                '/\{\-\-\s*(.*?)\s*\-\-\}/s' => '<!--$1-->'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected JS Data -> 5.2.75
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _jsdata()
    {
        $array = [];

        if( self::config()['jsdata'] ?? true )
        {
            $array =
            [
                '/\[\{\s*(.*?)\s*\}\]/s' => '{{$1}}'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Tags -> 5.3.36[edited]
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _tags()
    {
        $array = [];

        if( self::config()['tags'] ?? true )
        {
            $array =
            [
				// 5.3.4[added]
				'/\{\[\=(.*?)\]\}/'      => '<?php echo $1 ?>',
                '/\{\[\s*(.*?)\s*\]\}/s' => '<?php $1 ?>'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Html
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _html()
    {
        $array             = [];
        $htmlTagClose      = "</$1>";
        $htmlAttributesTag = '\#(!*\w+)\s*(\[(.*?)\])*';

        if( self::config()['html'] ?? true )
        {
            $array =
            [
                '/\/#/'                                         => '+[symbol??dies]+',
                '/\s+\#\#(\w+)/'                                => $htmlTagClose,
                '/'.$htmlAttributesTag.'\:/'                    => '<$1 $3>',
                '/'.$htmlAttributesTag.'\s+/'                   => '<$1 $3>',
                '/'.$htmlAttributesTag.'\s*\(\s*(.*?)\s*\)\:/s' => '<$1 $3>$4'.$htmlTagClose,
                '/'.$htmlAttributesTag.'\s*/'                   => '<$1 $3>',
                '/\<(\w+)\s+\>/'                                => '<$1>',
                '/\+\[symbol\?\?dies\]\+/'                      => '#'
            ];
        }

        return $array;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Symbols Header
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _symbolsHeader()
    {
        return
        [
            '/\/@/' => '+[symbol??at]+',
            '/::/'  => '+[symbol??static]+',
            '/\/:/' => '+[symbol??colon]+',
        ];
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Symbols Footer
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $htmlRegexChar
    //
    //--------------------------------------------------------------------------------------------------------
    protected static function _symbolsFooter()
    {
        return
        [
            '/\+\[symbol\?\?at\]\+/'     => '@',
            '/\+\[symbol\?\?static\]\+/' => '::',
            '/\+\[symbol\?\?colon\]\+/'  => ':',
        ];
    }
}
