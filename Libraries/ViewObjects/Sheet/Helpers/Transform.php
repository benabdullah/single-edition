<?php namespace ZN\ViewObjects\Sheet\Helpers;

use ZN\ViewObjects\SheetTrait;
use CallController;

class Transform extends CallController
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Style Sheet Trait
    //--------------------------------------------------------------------------------------------------------
    //
    // methods
    //
    //--------------------------------------------------------------------------------------------------------
    use SheetTrait;

    //--------------------------------------------------------------------------------------------------------
    // Transform
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $transforms = [];

    //--------------------------------------------------------------------------------------------------------
    // Matrix
    //--------------------------------------------------------------------------------------------------------
    //
    // @param numeric variadic $arguments
    //
    //--------------------------------------------------------------------------------------------------------
    public function matrix(...$arguments) : Transform
    {
        $this->_object(__FUNCTION__, $arguments);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Matrix 3d
    //--------------------------------------------------------------------------------------------------------
    //
    // @param numeric variadic $arguments
    //
    //--------------------------------------------------------------------------------------------------------
    public function matrix3d(...$arguments) : Transform
    {
        $this->_object(__FUNCTION__, $arguments);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Rotate
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $argument
    //
    //--------------------------------------------------------------------------------------------------------
    public function rotate(String $argument) : Transform
    {
        $this->_numeric(__FUNCTION__, $argument, 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Rotate 3d
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $x
    // @param string $y
    // @param string $z
    // @param string $angle
    //
    //--------------------------------------------------------------------------------------------------------
    public function rotate3d(String $x, String $y, String $z, String $angle) : Transform
    {
        $this->_numeric(__FUNCTION__, "$x,$y,$z,".( is_numeric($angle) ? $angle.'deg' : $angle ), 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Rotate X
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $argument
    //
    //--------------------------------------------------------------------------------------------------------
    public function rotateX(String $argument) : Transform
    {
        $this->_numeric(__FUNCTION__, $argument, 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Rotate Y
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $argument
    //
    //--------------------------------------------------------------------------------------------------------
    public function rotateY(String $argument) : Transform
    {
        $this->_numeric(__FUNCTION__, $argument, 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Rotate Z
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $argument
    //
    //--------------------------------------------------------------------------------------------------------
    public function rotateZ(String $argument) : Transform
    {
        $this->_numeric(__FUNCTION__, $argument, 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Scale
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $x
    // @param int $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function scale(Int $x, Int $y) : Transform
    {
        $this->_object(__FUNCTION__, "$x,$y");

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Scale 3d
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $x
    // @param int $y
    // @param int $z
    //
    //--------------------------------------------------------------------------------------------------------
    public function scale3d(Int $x, Int $y, Int $z) : Transform
    {
        $this->_object(__FUNCTION__, "$x,$y,$z");

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Scale X
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $x
    //
    //--------------------------------------------------------------------------------------------------------
    public function scaleX(Int $x) : Transform
    {
        $this->_object(__FUNCTION__, $x);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Scale Y
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function scaleY(Int $y) : Transform
    {
        $this->_object(__FUNCTION__, $y);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Scale Z
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $z
    //
    //--------------------------------------------------------------------------------------------------------
    public function scaleZ(Int $z) : Transform
    {
        $this->_object(__FUNCTION__, $z);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Skew
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $x
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function skew(String $x, String $y) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."deg";
        }

        if( is_numeric($y) )
        {
            $y = $y."deg";
        }

        $this->_object(__FUNCTION__, "$x, $y");

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Skew X
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $x
    //
    //--------------------------------------------------------------------------------------------------------
    public function skewX(String $x) : Transform
    {
        $this->_numeric(__FUNCTION__, $x, 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Skew Y
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function skewY(String $y) : Transform
    {
        $this->_numeric(__FUNCTION__, $y, 'deg');

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Translate 3d
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $x
    // @param string $y
    // @param string $z
    //
    //--------------------------------------------------------------------------------------------------------
    public function translate3d(String $x, String $y, String $z) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."px";
        }

        if( is_numeric($y) )
        {
            $y = $y."px";
        }

        if( is_numeric($z) )
        {
            $z = $z."px";
        }

        $this->_object(__FUNCTION__, "$x,$y,$z");

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Translate
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $x
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function translate(String $x, String $y) : Transform
    {
        if( is_numeric($x) )
        {
            $x = $x."px";
        }

        if( is_numeric($y) )
        {
            $y = $y."px";
        }

        $this->_object(__FUNCTION__, "$x,$y");

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Translate X
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $x
    //
    //--------------------------------------------------------------------------------------------------------
    public function translateX(String $x) : Transform
    {
        $this->_numeric(__FUNCTION__, $x);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Translate Y
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $y
    //
    //--------------------------------------------------------------------------------------------------------
    public function translateY(String $y) : Transform
    {
        $this->_numeric(__FUNCTION__, $y);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Translate Z
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $z
    //
    //--------------------------------------------------------------------------------------------------------
    public function translateZ(String $z) : Transform
    {
        $this->_numeric(__FUNCTION__, $z);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Perspective
    //--------------------------------------------------------------------------------------------------------
    //
    // @param int $n
    //
    //--------------------------------------------------------------------------------------------------------
    public function perspective(String $n) : Transform
    {
        $this->_numeric(__FUNCTION__, $n);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Create
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function create() : String
    {
        $transforms = '';

        if( ! empty($this->transforms) ) foreach( $this->transforms as $trans )
        {
            $transforms .= $trans;
        }

        $transforms = $this->_transform($transforms);

        $this->_defaultVariable();

        return $this->_tag($transforms);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Numeric
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $method
    // @param string $param
    // @param string $type
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _numeric($method, $param, $type = 'px')
    {
        if( is_numeric($param) )
        {
            $param = $param.$type;
        }

        $this->_object($method, $param);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Object
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $method
    // @param mixed  $parameters
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _object($method, $parameters)
    {
        $this->transforms[strtolower($method)] = $method."(".$this->_params($parameters).")";
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Params
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _params($data)
    {
        $arguments = $data;
        $argument  = '';

        if( is_array($data) )
        {
            foreach($arguments as $arg)
            {
                $argument .= $arg.",";
            }

            $argument = substr($argument, 0, -1);
        }
        else
        {
            $argument = $data;
        }

        return $argument;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Transform
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $data
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _transform($data)
    {
        $str  = '';
        $str .= $this->selector."{".EOL;

        foreach( $this->browsers as $val )
        {
            $str .= $val."transform:$data;".EOL;
        }

        $str .= "}".EOL;

        return $str;
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Default Variable
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _defaultVariable()
    {
        $this->selector   = 'this';
        $this->transforms = [];
    }
}
